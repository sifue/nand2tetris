// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    // 使える部品
    // Mux16 

    // zxを見て、入力xを0にする
    // if (zx == 1) sets x = 0       // 16-bit constant
    Mux16(a=x, b=false, sel=zx, out=x1);

    // nxを見て、入力xを反転させる
    // 使える部品 Not16
    Not16(in=x1, out=nx1);
    Mux16(a=x1, b=nx1, sel=nx, out=x2, out=x22);

    // zyを見て、入力yを0にする
    // if (zy == 1) sets y = 0       // 16-bit constant
    Mux16(a=y, b=false, sel=zy, out=y1);

    // nyを見て、入力yを反転させる
    // 使える部品 Not16
    Not16(in=y1, out=ny1);
    Mux16(a=y1, b=ny1, sel=ny, out=y2, out=y22);

    // fを見て 0 なら And16, 1 なら Add16
    // if (f == 1)  sets out = x + y  // integer 2's complement addition
    // if (f == 0)  sets out = x & y  // bitwise and
    // 使える回路 Add16 And16 Mux16
    Add16(a=x2, b=y2, out=add);
    And16(a=x22, b=y22, out=and);
    Mux16(a=and, b=add, sel=f, out=fout);

    // noを見て、出力を反転させる
    // if (no == 1) sets out = !out   // bitwise not
    Not16(in=fout, out=nfout);
    Mux16(a=fout, b=nfout, sel=no, out=out, out=out2, out=out3);

    // ここまででALU-basicsのテストの実装は完了！

    // zr とは
    // out == 0 なら 1、そうでないなら0
    // どうやったら 0 を検出できるか？
    // Andは、そのフラグが立ってる時に1を返す
    // oroutは全部が0なら0を返す
    Or16Way(in=out2, out=orout);
    // oroutを反転したものがzr
    Not(in=orout, out=zr);

    // ng とは
    // out < 0 なら 1、そうでないなら0
    // どうやったら 0 を検出できるか？
    // ビット表をみよう
    // 負の値は最終ビット、16ビットならインデックス15が1
    // つまり、out[15]が1なら負の値
    Is16Neg(in=out3, out=ng);
}