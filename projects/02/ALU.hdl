// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    // 使える部品
    // 多ビットマルチプレクサ Mux16
    
    // if (zx == 1) sets x = 0        // 16-bit constant
    Mux16(a=x, b=false, sel=zx, out=x1);
    
    // if (nx == 1) sets x = !x       // bitwise not
    // 反転とは、0 => 1, 1 => 0、つまりNot
    Not16(in=x1, out=nx1);
    Mux16(a=x1, b=nx1, sel=nx, out=x2);

    // if (zy == 1) sets y = 0        // 16-bit constant
    Mux16(a=y, b=false, sel=zy, out=y1);

    // if (ny == 1) sets y = !y       // bitwise not
    // 反転とは、0 => 1, 1 => 0、つまりNot
    Not16(in=y1, out=ny1);
    Mux16(a=y1, b=ny1, sel=ny, out=y2);

    // if (f == 1)  sets out = x + y  // integer 2's complement addition // xoy1
    // if (f == 0)  sets out = x & y  // bitwise and // xay1
    Or16(a=x2, b=y2, out=xoy1);
    And16(a=x2, b=y2, out=xay1);
    Mux16(a=xay1, b=xoy1, sel=f, out=out1);

    // if (no == 1) sets out = !out   // bitwise not
    // 後半の読み込みのために、out2を用意 (outは読めないため)
    Not16(in=out1, out=nout1);
    Mux16(a=out1, b=nout1, sel=no, out=out2);
    Mux16(a=out2, b=false, sel=false, out=out);

    // zr,      // (out == 0, 1, 0)
    // out == 0 なら そうでないなら1を返す zr
    // 多入力Orを使って16ビット全てをOrして0か調べる
    // out16or は 16ビットのOr結果、0ならfalse、1ならtrue
    // つまり、out16orが0ならzrはtrue、out16orが1ならzrはfalse
    // Or8Way利用時の エラー対応 sub bus of an internal node may not be used: load ALU.hdl 
    // https://github.com/tez3998/nand2tetris?tab=readme-ov-file#sub-bus-of-an-internal-node-may-not-be-used
    // Or16Way.hdl を作成
    Or16Way(in=out2, out=out16or);
    Mux(a=true, b=false, sel=out16or, out=zr);

    // ng;      // (out < 0,  1, 0)
    // out < 0 なら そうでないなら1を返す ng
    // 負かどうかは、最上位ビットが1かどうかで判断できる
    // out2[15] は 最上位ビット
    // out2[15] が1ならngはtrue、out[15]が0ならngはfalse
    // エラー対応  sub bus of an internal node may not be used
    // 16ビットの最上位ビットを取得するチップを作成
    // IsNeg16.hdl を作成
    IsNeg16(in=out2, out=ng);

}