// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    // 3つのレジスタからなる
    // Dレジスタ データレジスタ
    // Aレジスタ アドレスレジスタ
    // PC プログラムカウンタ

    // A命令 先頭0(indexは15)で始まり残り15bitをAレジスタに格納
    // C命令 先頭111で始まり残り13bitをコンピュータに命令
    // C令令は 111 ac1c2c3c4c5c6 d1d2d3 j1j2j3 となる
    // ac1c2c3c4c5c6 はcomp、 dはdest、 jはjumpを表す
    // instructionのindexで言うと
    // 15 14 13 12 11 10 9  8  7  6  5  4  3  2  1  0 
    // AC 1  1  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3

    // ### インプット
    // inM データメモリからの入力
    // instruction 命令メモリからの入力
    // reset リセット信号 1の場合はpcを0にする

    // ### アプトプット
    // outM データメモリへの出力
    // writeM データメモリへの書き込みをするか 1の場合は書き込みを行う
    // addressM データメモリ(M)の中のアドレス
    // pc 次の命令のアドレス

    // 配列のindexは右埋めであることに注意！
    // A命令の先頭0はinstruction[15]に格納される
    // C命令の先頭111はinstruction[15]〜instruction[13]に格納される

    // 制御を受けてALUかInstraction(命令メモリからの入力)を選択する
    // C命令のd1が1の場合は、ALUの出力をAレジスタにロードする (P100を参照)
    // d1 instruction[5] = 1 ならば、ALUの出力をAレジスタにロードする
    // つまり、instruction[15] = 1 かつ instruction[5] = 1 の場合は、ALUの出力をAレジスタにロードする
    And(a=instruction[15], b=instruction[5], out=loadALUonAReg);
    Mux16(a=instruction, b=outALU, sel=loadALUonAReg, out=outALUorIST);

    // Aレジスタ
    // 読み込み(loadAReg)は、A命令の時、つまり、instruction[15] が0の場合、または、
    // C命令の d1 が1の場合でinstruction[5] が1の場合に行う (loadALUonAReg)
    Not(in=instruction[15], out=isACommand);
    Or(a=isACommand, b=loadALUonAReg, out=loadAReg);
    ARegister(in=outALUorIST, load=loadAReg, out=outAReg, out=outAReg2, out=addressM16);
    DIM16to15(in=addressM16, out=addressM);

    // Aレジスタ or データメモリ
    // C命令の a が0の場合はAレジスタ、1の場合はMレジスタを選択する
    // a はinstruction[12]を表す instruction[12]が1の場合はMレジスタを選択する
    Mux16(a=outAReg, b=inM, sel=instruction[12], out=outAorM);

    // Dレジスタ
    // C命令の d2 が1の場合は、ALUの出力をDレジスタにロードする (P100を参照)
    // C命令でかつ d2 instruction[4] = 1 ならば、ALUの出力をDレジスタにロード(loadDReg)する
    And(a=instruction[15], b=instruction[4], out=loadDReg);
    DRegister(in=outALU2, load=loadDReg, out=outDReg);

    // ALU xをD、yをAorMにする
    // C命令の a が0の場合はAレジスタ、1の場合はMレジスタを選択する
    // zx, nx, zy, ny, f, no はC命令のcompのc1〜c6表す
    // c1 instruction[11]〜c6 instruction[6]を表す
    ALU(x=outDReg, y=outAorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outALU2, out=outM, zr=isALUoutZr, ng=isALUoutNeg);

    // C命令 instruction[15] が1の場合でかつ、
    // プログラムカウンタ(PC) loadPCが1の場合はAレジスタの値をPCにロードする、つまりJMP命令の場合、
    // ALUのputが、j1 (out<0) OR j2(out=0) OR j3(out>0) ならばjumpするためにPCにloadする
    And(a=isALUoutNeg, b=instruction[2], out=jump1);
    And(a=isALUoutZr, b=instruction[1], out=jump2);
    
    Not(in=isALUoutNeg, out=notALUoutNeg);
    Not(in=isALUoutZr, out=notALUoutZr);
    And(a=notALUoutNeg, b=notALUoutZr, out=isALUoutPos);
    And(a=isALUoutPos, b=instruction[0], out=jump3);

    Or(a=jump1, b=jump2, out=jump1or2);
    Or(a=jump1or2, b=jump3, out=jump1or2or3);
    And(a=jump1or2or3, b=instruction[15], out=loadPC, out=loadPC2);

    // インクリメントは、ジャンプしない時、リセットしない時に行う
    // (not (jump1or2or3) ) or (not reset) = isInc
    // ドモルガンの法則でandに変換する
    // Not( jump1or2or3 and reset ) = isInc
    And(a=loadPC, b=reset, out=loadPCandReset);
    Not(in=loadPCandReset, out=isInc);
    PC(in=outAReg2, load=loadPC2, inc=isInc, reset=reset, out=pc16);
    DIM16to15(in=pc16, out=pc);

    // C命令のd3が1の場合は、ALUの出力をメモリにロードする (P100を参照)
    // C命令 先頭111で始まり残り13bitをコンピュータに命令
    // つまり、instruction[15] = 1 かつ instruction[3] = 1 の場合は、ALUの出力をメモリにロードする
    And(a=instruction[15], b=instruction[3], out=writeM);
    
}
